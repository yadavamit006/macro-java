----------------------------------------------------------------------------
Thread.sleep() : method internally keeps checking for Interrupt status flag.

public static void sleep(long millis) throws InterruptedException{
    while (/* still waiting for millis to become zero */){
        if (Thread.interrupted()){ //Return if thread is Interrupted via parent or main thread
            throw new InterruptedException();
        }
    }
}
Note : Thread.interrupted() not only returns the flag but also sets it to false. Thus, once InterruptedException is
    thrown, the flag is reset. The parent thread no longer knows anything about the interruption request sent by the owner.
Improved code:
try {
  Thread.sleep(100);
} catch (InterruptedException ex) {
  Thread.currentThread().interrupt(); // When we call .interrupt(), an Interrupt status flag is set to true.
  throw new RuntimeException(ex);
}

----------------------------------------------------------------------------
Interview Question
main(){
    Thread.currentThread().wait(); //Exception : java.lang.IllegalMonitorStateException
}
Def : Thrown to indicate that a thread has attempted to wait on an object's monitor or to notify other threads waiting
    on an object's monitor without owning the specified monitor.
----------------------------------------------------------------------------

Thread can .start() only once else throws java.lang.illegalThreadStateException on second time

